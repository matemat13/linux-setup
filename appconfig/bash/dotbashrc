# set editor and shell
export EDITOR="/usr/bin/vim --servername dog --cmd 'let g:user_mode=1'"
export SHELL=/bin/bash
export TMUX_BIN=/usr/local/bin/tmux

# the location of `once generated ctags file`
export CTAGS_FILE_ONCE="~/tags-once" 

# allows killing process with all its children
killp () {

  if [ $# -eq 0 ]; then
    pes=$( cat ) 
  else
    pes=$1
  fi
  
	for child in $(ps -o pid,ppid -ax | \
   awk "{ if ( \$2 == $pes ) { print \$1 }}")
  do
    # echo "Killing child process $child because ppid = $pes"
    killp $child
  done
        
  # echo "killing $1"
  kill -9 "$1" > /dev/null 2> /dev/null
}

gitPullPush() {

 branch=`git branch | grep \* | sed 's/\* \([a-Z]*\)/\1/'`

 if [ $# -eq 0 ]; then
  git pull origin "$branch"
  git push origin "$branch"
 else
  git pull "$1" "$branch"
  git push "$1" "$branch"
 fi
}

# create alisases
alias ra='ranger'
alias sb="source ~/.bashrc"
alias gs="git status"
alias gppl="gitPullPush local"
alias gppo="gitPullPush origin"
alias :q=exit
alias octave="octave --no-gui $@"

# use ctags to generate code tags
generateTags() {

  # generate project's tags
  # TODO check for file existence
  ctagscmd="ctags --fields=+l -f ~/tags $CTAGS_SOURCE_DIR"
  eval $ctagscmd

  # generate `once generated tags`, e.g. ROS's tags
  if [ ! -e $(eval echo "$CTAGS_FILE_ONCE") ]; then
    echo "generating one-time generated tags"
    ctagscmd="ctags --fields=+l -f $CTAGS_FILE_ONCE $CTAGS_ONCE_SOURCE_DIR"
    eval $ctagscmd
  fi 
}

# running new tmux (or attaching) with session name derived from parent bash pid
runTmux() {
  
  # try to find session with the correct session id (based on the bashs PID)
  EXISTING_SESSION=`$TMUX_BIN ls 2> /dev/null | grep "T$BASHPID" | wc -l` 

  if [ "$EXISTING_SESSION" -gt "0" ]; then
  
    # if such session exists, attach to it
    $TMUX_BIN -2 attach-session -t "T$BASHPID"
  
  else
  
    # if such session does not exist, create it
    $TMUX_BIN new-session -s "T$BASHPID"
  
  fi 

  # when the session exists, find a file in /tmp with the name of the session
  # and extract a path from it. Then cd to it.
  FILENAME="/tmp/tmux_restore_path.txt"
  if [ -f $FILENAME ]; then

    MY_PATH=$(tail -n 1 $FILENAME)

    rm /tmp/tmux_restore_path.txt

    cd $MY_PATH

  fi
}
_trap_exit() { $TMUX_BIN kill-session -t "T$BASHPID"; }                                                       
trap _trap_exit EXIT                                                                                  

# VIM alias for running vim in tmux and in servermode
runVim() {
  
  { generateTags & disown; } 2> /dev/null

  # if the tmux session does not exist, create new and run vim in it
  if [ -z $TMUX ]; then
  
    PES="$BASHPID"
    # if there is a tmux session with the same name as the current bashpid
    num=`$TMUX_BIN ls 2> /dev/null | grep "T$PES" | wc -l`
    if [ "$num" -gt "0" ]; then

      ID=`$TMUX_BIN new-window -t "T$PES" -a -P`
      $TMUX_BIN send-keys -t $ID "$EDITOR -- ${@}" C-m
      $TMUX_BIN -2 attach-session -t "T$PES"
    
    else 

      $TMUX_BIN new-session -s "T$PES" -d "$EDITOR -- ${@}" \; attach

    fi

  else

    bash -c "$EDITOR -- ${@}"

  fi
}
alias vim=runVim

# source tmuxinator
source $GIT_PATH/linux-setup/submodules/tmuxinator/completion/tmuxinator.bash

# special code for i3 users
if [ "$USE_I3" = "true" ]; then

  # reload configuration for urxvt
  xrdb ~/.Xresources

  # set keyboard repeat rate
  xset r rate 350 55

  echo '#!/bin/bash
echo '"$ROS_IP" > ~/.i3/ros_ip.sh
  chmod +x ~/.i3/ros_ip.sh

  echo '#!/bin/bash
echo '"$ROS_MASTER_URI" | sed 's/http:\/\/\(.*\):.*/\1/' > ~/.i3/ros_master_uri.sh
  chmod +x ~/.i3/ros_master_uri.sh
  
  echo '#!/bin/bash
echo '"$UAV_NAME" > ~/.i3/uav_name.sh
  chmod +x ~/.i3/uav_name.sh
fi

# set vi mode in bash
set -o vi

# by default, athame should be off
export ATHAME_ENABLED=0
export ATHAME_SHOW_MODE=1
export ATHAME_VIM_PERSIST=0

# but if we are in tmux launched by the user/terminal (not tmuxinator)
# and if user want to use athame, use it
if [ -n "$TMUX" ]; then

  if [ "$USE_ATHAME" = "true" ]; then

    SESSION_NAME=`$TMUX_BIN display-message -p '#S'`

    if [[ $SESSION_NAME =~ ^T[0-9]+$ ]]; then

      export ATHAME_ENABLED=1

    fi
  fi
fi

# load tmux automatically                                                                             
if [ "$RUN_TMUX" = "true" ]; then
  if command -v $TMUX_BIN>/dev/null; then                                                                    
    if [ ! -z "$PS1" ]; then # unless shell not loaded interactively, run tmux                          
      [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && runTmux                                                  
    fi                                                                                                  
  fi
fi
